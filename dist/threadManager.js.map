{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8b999252ca8f3518dcee","webpack:///./src/threadManager.js"],"names":["DEV_CALL","fnc","THREADMANAGER__ENV","WorkerStatus","IDLE","Symbol","BUSY","ThreadManager","filePath","config","eHandler","Error","Array","isArray","distributionMethod","initialization","sendingMethod","amountOfWorkers","workers","lastAssignedWorker","isCallbackDefined","onMessage","initializeWorkers","middleware","prototype","amount","handler","initializedWorkers","currentAmount","length","i","initializeWorker","push","Worker","index","worker","id","status","setEventHandler","console","warn","_eventHandler","callback","workerid","message","setDefaultEventHandler","onmessage","use","distributeWork","event","context","workHandler","undefined","createAndGiveWork","assignedWorker","chooseWorker","giveWork","broadcast","postMessage","data","JSON","stringify","foundIdleWorker","Math","floor","random","newWorker","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC3DA,MAAMA,WAAYC,GAAD,IAAS;AACtB,MAAIC,uBAAuB,aAA3B,EAA0C;AAAED;AAAQ,GAApD,MACK;AAAE;AAAS;AACnB,CAHD;;AAKA,MAAME,eAAe;AACjBC,QAAMC,OAAO,CAAP,CADW;AAEjBC,QAAMD,OAAO,CAAP;AAFW,CAArB;AAKA;;;;;;;;;;;;;;;;;AAgBA,MAAME,gBAAgB,UAAUC,QAAV,EAAoBC,MAApB,EAA4BC,QAA5B,EAAsC;AACxD,MAAI,CAACF,QAAL,EAAe;AACX,UAAM,IAAIG,KAAJ,CACF,qGAAqGH,QADnG,CAAN;AAGH;;AAED,OAAKC,MAAL,GAAcA,UAAU,EAAxB;;AAEA,MAAI,OAAO,KAAKA,MAAZ,KAAuB,QAAvB,IAAmCG,MAAMC,OAAN,CAAc,KAAKJ,MAAnB,CAAvC,EAAmE;AAC/D,UAAM,IAAIE,KAAJ,CAAU,uDAAV,CAAN;AACH;;AAED,MAAI,CAAC,KAAKF,MAAL,CAAYK,kBAAjB,EAAqC;AAAE,SAAKL,MAAL,CAAYK,kBAAZ,GAAiC,aAAjC;AAAiD;;AACxF,MAAI,CAAC,KAAKL,MAAL,CAAYM,cAAjB,EAAiC;AAAE,SAAKN,MAAL,CAAYM,cAAZ,GAA6B,UAA7B;AAA0C;;AAC7E,MAAI,CAAC,KAAKN,MAAL,CAAYO,aAAjB,EAAgC;AAAE,SAAKP,MAAL,CAAYO,aAAZ,GAA4B,SAA5B;AAAwC;;AAE1E,OAAKR,QAAL,GAAgBA,QAAhB,CAjBwD,CAmBxD;;AACA,OAAKS,eAAL,GAAuBR,OAAOQ,eAAP,IAA0B,CAAjD;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,kBAAL,GAA0B,CAAC,CAA3B,CAtBwD,CAwBxD;;AACA,MAAI,CAACT,QAAD,IAAa,OAAOA,QAAP,KAAoB,UAArC,EAAiD;AAC7C,SAAKU,iBAAL,GAAyB,KAAzB;AACH,GAFD,MAEO;AACH,SAAKC,SAAL,GAAiBX,QAAjB;AACA,SAAKU,iBAAL,GAAyB,IAAzB;AACH;;AAED,MAAI,KAAKX,MAAL,CAAYM,cAAZ,KAA+B,UAAnC,EAA+C;AAC3C,SAAKO,iBAAL;AACH;;AACD,OAAKC,UAAL,GAAkB,EAAlB;AAEH,CArCD;AAuCA;;;;;;;AAKAhB,cAAciB,SAAd,CAAwBF,iBAAxB,GAA4C,UAAUG,MAAV,EAAkBC,OAAlB,EAA2B;AACnE,MAAIC,qBAAqB,CAAzB;AACA,MAAIC,gBAAgB,KAAKV,OAAL,CAAaW,MAAjC;;AACA,OAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKb,eAAL,GAAuBW,aAA3C,EAA0DE,GAA1D,EAA+D;AAC3D,QAAIL,UAAUK,KAAKL,MAAnB,EAA2B;AAC3B,SAAKM,gBAAL,CAAsBL,OAAtB;AACH;AACJ,CAPD;;AAUAnB,cAAciB,SAAd,CAAwBO,gBAAxB,GAA2C,UAAUL,OAAV,EAAmB;AAC1D,MAAI,KAAKR,OAAL,CAAaW,MAAb,GAAsB,KAAKZ,eAA/B,EAAgD;AAC5C,SAAKC,OAAL,CAAac,IAAb,CAAkB,IAAIC,MAAJ,CAAW,KAAKzB,QAAhB,CAAlB;AACA,UAAM0B,QAAQ,KAAKhB,OAAL,CAAaW,MAAb,GAAsB,CAApC;AACA,UAAMM,SAAS,KAAKjB,OAAL,CAAagB,KAAb,CAAf;AACAC,WAAOC,EAAP,GAAYF,KAAZ;AACAC,WAAOE,MAAP,GAAgBlC,aAAaC,IAA7B;;AACA,QAAIsB,OAAJ,EAAa;AACT,WAAKY,eAAL,CAAqBH,MAArB,EAA6BT,OAA7B;AACH,KAFD,MAEO;AACH,WAAKY,eAAL,CAAqBH,MAArB,EAA6B,KAAKd,SAAlC;AACH;;AACD,WAAOc,MAAP;AACH,GAZD,MAYO;AACHI,YAAQC,IAAR,CAAa,+FAAb;AACH;AACJ,CAhBD;;AAkBAjC,cAAciB,SAAd,CAAwBiB,aAAxB,GAAwC,UAASC,QAAT,EAAmBC,QAAnB,EAA4B;AAChE,MAAID,QAAJ,EAAc;AACV,WAAQE,OAAD,IAAW;AACd,WAAK1B,OAAL,CAAayB,QAAb,EAAuBN,MAAvB,GAAgClC,aAAaC,IAA7C;;AACA,WAAK,IAAI0B,IAAI,CAAb,EAAgBA,IAAI,KAAKP,UAAL,CAAgBM,MAApC,EAA4CC,GAA5C,EAAiD;AAC7C,aAAKP,UAAL,CAAgBO,CAAhB,EAAmBc,OAAnB;AACH;;AACDF,eAASE,OAAT;AACH,KAND;AAOH;AACJ,CAVD;;AAaArC,cAAciB,SAAd,CAAwBqB,sBAAxB,GAAiD,UAAUnB,OAAV,EAAmB;AAChE,MAAI,CAACA,OAAD,IAAY,OAAOA,OAAP,KAAmB,UAAnC,EAA+C;AAC3C,UAAM,IAAIf,KAAJ,CAAU,+CAA+C,OAAOe,OAAhE,CAAN;AACH;;AACD,OAAKL,SAAL,GAAiBK,OAAjB;AACA,OAAKN,iBAAL,GAAyB,IAAzB;AACH,CAND;;AASAb,cAAciB,SAAd,CAAwBc,eAAxB,GAA0C,UAAUH,MAAV,EAAkBT,OAAlB,EAA2B;AACjES,SAAOW,SAAP,GAAmB,KAAKL,aAAL,CAAmBf,OAAnB,EAA4BS,OAAOC,EAAnC,CAAnB;AACH,CAFD;;AAIA7B,cAAciB,SAAd,CAAwBuB,GAAxB,GAA8B,UAAUxB,UAAV,EAAsB;AAChD,MAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AAClC,UAAM,IAAIZ,KAAJ,CAAU,kEAAkE,OAAOe,OAAnF,CAAN;AACH;;AACD,OAAKH,UAAL,CAAgBS,IAAhB,CAAqBT,UAArB;AACH,CALD;;AAQAhB,cAAciB,SAAd,CAAwBwB,cAAxB,GAAyC,UAAUC,KAAV,EAAiBC,OAAjB,EAA0BR,QAA1B,EAAoC;AACzE,MAAIS,cAAcT,YAAY,KAAKrB,SAAnC;;AACA,MAAI8B,gBAAgBC,SAAhB,IAA6B,OAAOD,WAAP,KAAuB,UAAxD,EAAoE;AAChE,UAAM,IAAIxC,KAAJ,CAAU,oEAAV,CAAN;AACH,GAJwE,CAMzE;;;AACA,MAAI,KAAKO,OAAL,CAAaW,MAAb,GAAsB,KAAKZ,eAA3B,IAA8C,KAAKR,MAAL,CAAYM,cAAZ,KAA+B,SAAjF,EAA4F;AACxF,WAAO,KAAKsC,iBAAL,CAAuBF,WAAvB,EAAoCF,KAApC,EAA2CC,OAA3C,CAAP;AACH;;AAED,MAAII,iBAAiB,KAAKC,YAAL,EAArB;;AAEA,MAAIJ,gBAAgBG,eAAejC,SAAnC,EAA8C;AAC1C,SAAKiB,eAAL,CAAqBgB,cAArB,EAAqCH,WAArC;AACH;;AACD,OAAKK,QAAL,CAAcF,cAAd,EAA8BL,KAA9B,EAAqCC,OAArC;AAEH,CAlBD;;AAqBA3C,cAAciB,SAAd,CAAwBiC,SAAxB,GAAoC,UAAUR,KAAV,EAAiBC,OAAjB,EAA0BR,QAA1B,EAAoC;AACpE,MAAIS,cAAcT,YAAY,KAAKrB,SAAnC;;AACA,MAAI8B,gBAAgBC,SAAhB,IAA6B,OAAOD,WAAP,KAAuB,UAAxD,EAAoE;AAChE,UAAM,IAAIxC,KAAJ,CAAU,oEAAV,CAAN;AACH;;AACD,MAAI,KAAKO,OAAL,CAAaW,MAAb,GAAsB,KAAKZ,eAA/B,EAAgD;AAC5C,SAAKK,iBAAL;AACH;;AACD,OAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAI,KAAKZ,OAAL,CAAaW,MAAjC,EAAyCC,GAAzC,EAA8C;AAC1C,QAAIqB,gBAAgB,KAAKjC,OAAL,CAAaY,CAAb,EAAgBgB,SAApC,EAA+C;AAC3C,WAAKR,eAAL,CAAqB,KAAKpB,OAAL,CAAaY,CAAb,CAArB,EAAsCqB,WAAtC;AACH;;AACD,SAAKK,QAAL,CAAc,KAAKtC,OAAL,CAAaY,CAAb,CAAd,EAA+BmB,KAA/B,EAAsCC,OAAtC;AACH;AACJ,CAdD;;AAgBA3C,cAAciB,SAAd,CAAwBgC,QAAxB,GAAmC,UAAUrB,MAAV,EAAkBc,KAAlB,EAAyBC,OAAzB,EAAkC;AACjEf,SAAOE,MAAP,GAAgBlC,aAAaG,IAA7B;;AACA,MAAI,KAAKG,MAAL,CAAYO,aAAZ,KAA8B,cAAlC,EAAkD;AAC9CmB,WAAOuB,WAAP,CAAmBR,OAAnB,EAA4B,CAACA,OAAD,CAA5B;AACH,GAFD,MAEO,IAAI,KAAKzC,MAAL,CAAYO,aAAZ,KAA8B,MAAlC,EAA0C;AAC7C,QAAI2C,OAAO;AAAEV,WAAF;AAASC;AAAT,KAAX;AACAf,WAAOuB,WAAP,CAAmBE,KAAKC,SAAL,CAAeF,IAAf,CAAnB;AACH,GAHM,MAGA;AACHxB,WAAOuB,WAAP,CAAmB;AAAET,WAAF;AAASC;AAAT,KAAnB;AACH;AACJ,CAVD;;AAaA3C,cAAciB,SAAd,CAAwB+B,YAAxB,GAAuC,YAAY;AAE/C,MAAI,KAAKrC,OAAL,CAAaW,MAAb,KAAwB,CAA5B,EAA+B;AAC3B,WAAO,KAAKX,OAAL,CAAa,CAAb,CAAP;AACH;;AAED,MAAIoC,cAAJ;;AACA,UAAQ,KAAK7C,MAAL,CAAYK,kBAApB;AACI,SAAK,aAAL;AACI;AACA,UAAI,KAAKK,kBAAL,KAA4BiC,SAA5B,IAAyC,KAAKjC,kBAAL,GAA0B,CAAvE,EAA0E;AACtEmC,yBAAiB,KAAKpC,OAAL,CAAa,CAAb,CAAjB;AACA,aAAKC,kBAAL,GAA0B,CAA1B;AACH,OAHD,MAGO;AACH;AACAmC,yBAAiB,KAAKpC,OAAL,CAAa,KAAKC,kBAAlB,CAAjB;AACA,aAAKA,kBAAL;;AACA,YAAI,KAAKA,kBAAL,IAA2B,KAAKD,OAAL,CAAaW,MAA5C,EAAoD;AAChD,eAAKV,kBAAL,GAA0B,CAAC,CAA3B;AACH;AACJ;;AACD;;AACJ,SAAK,YAAL;AACI,UAAI2C,kBAAkB,KAAtB;;AACA,WAAK,IAAIhC,IAAI,CAAb,EAAgBA,IAAI,KAAKZ,OAAL,CAAaW,MAAjC,EAAyCC,GAAzC,EAA8C;AAC1C,YAAI,KAAKZ,OAAL,CAAaY,CAAb,EAAgBO,MAAhB,KAA2BlC,aAAaC,IAA5C,EAAkD;AAC9C0D,4BAAkB,IAAlB;AACAR,2BAAiB,KAAKpC,OAAL,CAAaY,CAAb,CAAjB;AACA;AACH;AACJ,OARL,CASI;;;AACA,UAAIgC,eAAJ,EAAqB;AACjB;AACH;;AACL;AACIR,uBAAiB,KAAKpC,OAAL,CAAa6C,KAAKC,KAAL,CAAWD,KAAKE,MAAL,KAAgB,KAAK/C,OAAL,CAAaW,MAAxC,CAAb,CAAjB;AACA;AA9BR;;AAgCA,SAAOyB,cAAP;AACH,CAxCD;;AA2CA/C,cAAciB,SAAd,CAAwB6B,iBAAxB,GAA4C,UAAUJ,KAAV,EAAiBC,OAAjB,EAA0BxB,OAA1B,EAAmC;AAC3E,QAAMwC,YAAY,KAAKnC,gBAAL,CAAsBL,OAAtB,CAAlB;AACA,OAAK8B,QAAL,CAAcU,SAAd,EAAyBjB,KAAzB,EAAgCC,OAAhC;AACH,CAHD;;AAKAiB,OAAOC,OAAP,GAAiB7D,aAAjB,C","file":"threadManager.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"threadManager\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"threadManager\"] = factory();\n\telse\n\t\troot[\"threadManager\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8b999252ca8f3518dcee","\r\n\r\nconst DEV_CALL = (fnc) => {\r\n    if (THREADMANAGER__ENV === 'development') { fnc(); }\r\n    else { return; }\r\n}\r\n\r\nconst WorkerStatus = {\r\n    IDLE: Symbol(1),\r\n    BUSY: Symbol(2)\r\n};\r\n\r\n/**\r\n * @description - implements methods of delegating work to workers and acts as intermediary between the requesting objects and the workers\r\n * \r\n * @param {String} relFilePath - path to the file that implements the desired worker\r\n * @param {Object} config - (OPTIONAL) defaults to an empty object\r\n * @param {function} eHandler - function that takes one argument, the event, which will hold the data passed back by the workers on message broadcasting\r\n * \r\n * \r\n * @property {Object} config - Holds the configuration provided by the user\r\n * @property {String} callerPath - Holds the path provided by __dirname on the context of the caller\r\n * @property {String} relFilePath - Holds the relative path from callerPath to the file the user wants to execute the worker\r\n * @property {Number} amountOfWorkers - Determines how many workers will the thread manage\r\n * @property {Worker[]} workers - Holds references to all the workers being managed\r\n * @property {Number} lastAssignedWorker - Matches the index of the worker inside workers array that was assigned work more recently\r\n * \r\n */\r\nconst ThreadManager = function (filePath, config, eHandler) {\r\n    if (!filePath) {\r\n        throw new Error(\r\n            'File path must be provided in order for the thread manager to work, expected a string but got a ' + filePath\r\n        );\r\n    }\r\n\r\n    this.config = config || {};\r\n\r\n    if (typeof this.config !== 'object' || Array.isArray(this.config)) {\r\n        throw new Error('Invalid configuration provided for the thread manager');\r\n    }\r\n\r\n    if (!this.config.distributionMethod) { this.config.distributionMethod = \"round robin\"; }\r\n    if (!this.config.initialization) { this.config.initialization = \"at start\"; }\r\n    if (!this.config.sendingMethod) { this.config.sendingMethod = \"default\"; }\r\n\r\n    this.filePath = filePath;\r\n\r\n    //worker config\r\n    this.amountOfWorkers = config.amountOfWorkers || 4;\r\n    this.workers = [];\r\n    this.lastAssignedWorker = -1;\r\n\r\n    //define provided handler\r\n    if (!eHandler || typeof eHandler !== \"function\") {\r\n        this.isCallbackDefined = false;\r\n    } else {\r\n        this.onMessage = eHandler;\r\n        this.isCallbackDefined = true;\r\n    }\r\n\r\n    if (this.config.initialization === \"at start\") {\r\n        this.initializeWorkers();\r\n    }\r\n    this.middleware = [];\r\n\r\n};\r\n\r\n/**\r\n * \r\n * @param {Number} amount \r\n * @param {Function} [handler] \r\n */\r\nThreadManager.prototype.initializeWorkers = function (amount, handler) {\r\n    let initializedWorkers = 0;\r\n    let currentAmount = this.workers.length;\r\n    for (let i = 0; i < this.amountOfWorkers - currentAmount; i++) {\r\n        if (amount && i >= amount) return;\r\n        this.initializeWorker(handler);\r\n    }\r\n};\r\n\r\n\r\nThreadManager.prototype.initializeWorker = function (handler) {\r\n    if (this.workers.length < this.amountOfWorkers) {\r\n        this.workers.push(new Worker(this.filePath));\r\n        const index = this.workers.length - 1;\r\n        const worker = this.workers[index];\r\n        worker.id = index;\r\n        worker.status = WorkerStatus.IDLE;\r\n        if (handler) {\r\n            this.setEventHandler(worker, handler);\r\n        } else {\r\n            this.setEventHandler(worker, this.onMessage);\r\n        }\r\n        return worker;\r\n    } else {\r\n        console.warn('Adding more threads that exceed the configured ammount, change the configured ammount instead');\r\n    }\r\n}\r\n\r\nThreadManager.prototype._eventHandler = function(callback, workerid){\r\n    if (callback) {\r\n        return (message)=>{\r\n            this.workers[workerid].status = WorkerStatus.IDLE\r\n            for (let i = 0; i < this.middleware.length; i++) {\r\n                this.middleware[i](message);\r\n            }\r\n            callback(message);\r\n        };\r\n    }\r\n}\r\n\r\n\r\nThreadManager.prototype.setDefaultEventHandler = function (handler) {\r\n    if (!handler || typeof handler !== 'function') {\r\n        throw new Error('Expected a function as argument and got a ' + typeof handler);\r\n    }\r\n    this.onMessage = handler;\r\n    this.isCallbackDefined = true;\r\n};\r\n\r\n\r\nThreadManager.prototype.setEventHandler = function (worker, handler) {\r\n    worker.onmessage = this._eventHandler(handler, worker.id);\r\n}\r\n\r\nThreadManager.prototype.use = function (middleware) {\r\n    if (typeof middleware !== 'function') {\r\n        throw new Error('ThreadManager middleware is expected to be a function, not a ' + typeof handler);\r\n    }\r\n    this.middleware.push(middleware);\r\n}\r\n\r\n\r\nThreadManager.prototype.distributeWork = function (event, context, callback) {\r\n    let workHandler = callback || this.onMessage;\r\n    if (workHandler === undefined || typeof workHandler !== \"function\") {\r\n        throw new Error('Cant distribute work without a function to handle its return value');\r\n    }\r\n\r\n    //if not all workers are not initialized we initialize one of them and assign it the work\r\n    if (this.workers.length < this.amountOfWorkers && this.config.initialization === \"delayed\") {\r\n        return this.createAndGiveWork(workHandler, event, context);\r\n    }\r\n\r\n    let assignedWorker = this.chooseWorker();\r\n\r\n    if (workHandler !== assignedWorker.onMessage) {\r\n        this.setEventHandler(assignedWorker, workHandler);\r\n    }\r\n    this.giveWork(assignedWorker, event, context);\r\n\r\n}\r\n\r\n\r\nThreadManager.prototype.broadcast = function (event, context, callback) {\r\n    let workHandler = callback || this.onMessage;\r\n    if (workHandler === undefined || typeof workHandler !== \"function\") {\r\n        throw new Error('Cant distribute work without a function to handle its return value');\r\n    }\r\n    if (this.workers.length < this.amountOfWorkers) {\r\n        this.initializeWorkers();\r\n    }\r\n    for (let i = 0; i < this.workers.length; i++) {\r\n        if (workHandler !== this.workers[i].onmessage) {\r\n            this.setEventHandler(this.workers[i], workHandler);\r\n        }\r\n        this.giveWork(this.workers[i], event, context);\r\n    }\r\n}\r\n\r\nThreadManager.prototype.giveWork = function (worker, event, context) {\r\n    worker.status = WorkerStatus.BUSY;\r\n    if (this.config.sendingMethod === \"transferList\") {\r\n        worker.postMessage(context, [context]);\r\n    } else if (this.config.sendingMethod === 'json') {\r\n        let data = { event, context };\r\n        worker.postMessage(JSON.stringify(data));\r\n    } else {\r\n        worker.postMessage({ event, context });\r\n    }\r\n}\r\n\r\n\r\nThreadManager.prototype.chooseWorker = function () {\r\n\r\n    if (this.workers.length === 1) {\r\n        return this.workers[0];\r\n    }\r\n\r\n    let assignedWorker;\r\n    switch (this.config.distributionMethod) {\r\n        case 'round robin':\r\n            //If its the first time or we finished a round we distribute it to the first\r\n            if (this.lastAssignedWorker === undefined || this.lastAssignedWorker < 0) {\r\n                assignedWorker = this.workers[0];\r\n                this.lastAssignedWorker = 1;\r\n            } else {\r\n                //increase the index and use it to determine the actual worker to assign\r\n                assignedWorker = this.workers[this.lastAssignedWorker];\r\n                this.lastAssignedWorker++;\r\n                if (this.lastAssignedWorker >= this.workers.length) {\r\n                    this.lastAssignedWorker = -1;\r\n                }\r\n            }\r\n            break;\r\n        case 'first idle':\r\n            let foundIdleWorker = false;\r\n            for (let i = 0; i < this.workers.length; i++) {\r\n                if (this.workers[i].status === WorkerStatus.IDLE) {\r\n                    foundIdleWorker = true;\r\n                    assignedWorker = this.workers[i];\r\n                    break;\r\n                }\r\n            }\r\n            //TODO: add a way to configure what to do as fallback, by now we assing it randomly via fallthrough to the next case;\r\n            if (foundIdleWorker) {\r\n                break;\r\n            }\r\n        default:\r\n            assignedWorker = this.workers[Math.floor(Math.random() * this.workers.length)];\r\n            break;\r\n    }\r\n    return assignedWorker;\r\n}\r\n\r\n\r\nThreadManager.prototype.createAndGiveWork = function (event, context, handler) {\r\n    const newWorker = this.initializeWorker(handler);\r\n    this.giveWork(newWorker, event, context);\r\n};\r\n\r\nmodule.exports = ThreadManager;\n\n\n// WEBPACK FOOTER //\n// ./src/threadManager.js"],"sourceRoot":""}